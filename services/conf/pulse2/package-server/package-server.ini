[main]
# ----------
# NETWORKING
# ----------
# port = 9990
host = 0.0.0.0
# The public IP send when a client agent is wondering how to reach this package server, set to the "host" parameter value if not defined
public_ip =
public_mask = 255.255.255.0

[connection]
jid = 
password = ipxe_passwd
recipient = master_inv@pulse
server=127.0.0.1
port=5222
timeout=40
domain = pulse

[associate]
#Â associate = mac|uuid
# if uuid, use inventory serial uuid to associate the machine to inventory
# else use the current system
associate=uuid


#
# --------
# PACKAGES
# --------
# Is package autodetection activated ?
# package_detect_activate = 0
# Time between two loops of detection
# package_detect_loop = 60
# methods in none, last_time_modification, check_size
# for more than 1 method, separate with ","
# package_detect_smart_method = none
# package_detect_smart_time = 60
# Package api can synhronise package data to others servers
# package_mirror_loop = 5
# package synchronisation targets
# package_mirror_target =
# package synchronisation state file. used only if package_mirror_target is defined
# File where pending sync are written so that they can be finished on package server restart.
# package_mirror_status_file = /var/data/mmc/status
# package synchronisation command to use
# package_mirror_command = /usr/bin/rsync
# package synchronisation command options
# package_mirror_command_options = -ar --delete
# package synchronisation command on only one level options
# package_mirror_level0_command_options = -d --delete
# options passed to SSH via "-o" if specified --rsh is automatically added to package_mirror_command_options
# package_mirror_command_options_ssh_options =
# for example
# package_mirror_command_options_ssh_options = IdentityFile=/root/.ssh/id_rsa StrictHostKeyChecking=no Batchmode=yes PasswordAuthentication=no ServerAliveInterval=10 CheckHostIP=no ConnectTimeout=10
# loop for the sync of the whole package directory
# can only be activated when package_mirror_target is given
# package_global_mirror_activate = 1
# package_global_mirror_loop = 3600
# package_global_mirror_command_options = -ar --delete
# real package deletion
# real_package_deletion = 1
#
# ----------
# MISC STUFF
# ----------
# machine/mirror assign algo
# mm_assign_algo = default
# user/packageput assign algo
# up_assign_algo = default
tmp_input_dir = /var/lib/pulse2/package-server-tmpdir

[daemon]
# the place were we put the daemons's PID files
# pidfile = /var/run/pulse2-package-server.pid
# user = root
# group = root
# umask = 0022
# Example of non-root execution settings:
# user = mmc
# group = mmc
# umask = 0002

[ssl]
# enablessl = 1
# username =
# password =
# certfile = /etc/mmc/pulse2/package-server/keys/cacert.pem
# privkey = /etc/mmc/pulse2/package-server/keys/privkey.pem
# verifypeer = 0

[mmc_agent]
# We sometimes need to talk to our referent agent
# here are some key to speak with it
host = 127.0.0.1
port = 7080
username = mmc
password = s3cr3t
# enablessl = True
# verifypeer = False
# cacert = /etc/mmc/pulse2/package-server/keys/cacert.pem
# localcert = /etc/mmc/pulse2/package-server/keys/privkey.pem

[mirror_api]
# mount_point = /rpc

[user_packageapi_api]
# mount_point = /upaa

[scheduler_api]
# mount_point = /scheduler_api
# schedulers = scheduler_01

[imaging_api]
# mount_point = /imaging_api
# uuid = PLEASE_PUT_A_UUID_FOR_THAT_SERVER
##################
# Some locations #
##################
### main tree
# base_folder = /var/lib/pulse2/imaging
### Bootloaders
# Where bootloader (and bootsplash) is stored, relative to "base_folder"
# bootloader_folder = bootloader   # Where bootloader (and bootsplash) is stored, relative to "base_folder"
# pxe_bootloader = pxelinux.0        # the network bootloader
# cd_bootloader = cd_boot          # the cdrom bootloader
# bootsplash_file = bootsplash.png # the bootloader splashscreen
### Bootmenus
# Where boot menus are generated / being served, relative to "base_folder"
# bootmenus_folder = bootmenus
### Diskless
# Where pulse imaging client kernel and initrd are stored, relative to "base_folder"
# NOW IN DATABASE
# diskless_folder = davos # Where kernel and initrd are stored, relative to "base_folder"
# diskless_kernel = vmlinuz     # Name of the diskless kernel to run
# diskless_initrd = initrd.img     # Name of the diskless initrd to boot (core)
# diskless_initrdcd = initrdcd # Name of the diskless initrd to boot (addon to boot on CD)
### Davos options
# Options passed to Davos at boot. Currently 3 options are taken into account:
# nfs_server, nfs_share_masters and nfs_share_postinst
# davos_options = nfs_server= nfs_share_masters= nfs_share_postinst=
### Tools
# Where pulse tools are stored, relative to "base_folder"
# tools_folder = tools
### Inventories
# Where inventories are stored / retrieved, relative to "base_folder"
# inventories_folder = inventories
### PXE Parameters
# If pxe_tftp_ip is not defined, it takes the public_ip value
# pxe_tftp_ip = 192.168.1.19
# If pxe_mask is not defined, it takes the public_mask value
# pxe_mask = 255.255.255.0
# pxe_subnet = 192.168.1.0
# If pxe_gateway is not defined, it takes the public_ip value
# pxe_gateway = 198.160.1.1
# pxe_debug = True
# pxe_xml = True
# Latency between inventory injection and menu generation.
# pxe_time = 3
# Time between injection of datagram cf pulse-register-pxe
# pxe_timesenddata = 1
### NFS
# Where additionnal material (hdmap, exclude) are stored / retrieved, relative to "base_folder"
# (a.k.a. /revoinfo client side)
# computers_folder = computers
# Where images are stored, relative to "base_folder"
# (a.k.a. /revoinfo client side)
# masters_folder = masters
# Where postinst tools are stored, relative to "base_folder"
# (a.k.a. /opt client side)
# postinst_folder = postinst
# will contain archived computer imaging data
# archives_folder = archives
### ISO images generation
# isos_folder = /var/lib/pulse2/imaging/isos # will contain generated ISO images
# isogen_tool = /usr/bin/genisoimage         # tool used to generate ISO file
### RPC offline mode
# RPC replay file name, relative to "base_folder"
# rpc_replay_file = rpc-replay.pck
# RPC replay loop timer in seconds
# rpc_loop_timer = 60
# RPC to replay at each loop
# rpc_count = 10
# Interval in seconds between two RPCs
# rpc_interval = 2
# Our UUID cache *inside* base_folder
# uuid_cache_file = uuid-cache.txt
# Our UUID cache lifetime
# uuid_cache_lifetime = 300
# listening on this port to communicate with PXE
# pxe_port = 1001
# inventory host
# inventory_host = 127.0.0.1
# inventory port
# inventory_port = 9999
# inventory SSL enable
# inventory_enablessl = False
# on glpi, PXE register by minimal inventory
# glpi_mode = False
# identification on PXE console
# pxe_password = pxe

[mirror:01]
mount_point = /mirror1
src = /var/lib/pulse2/packages

[package_api_put:01]
mount_point = /package_api_get1
src = /var/lib/pulse2/packages
tmp_input_dir = /var/lib/pulse2/package-server-tmpdir

# Logger configuration

[loggers]
keys = root,imaging

[handlers]
keys = hand01,hand_imaging

[formatters]
keys = form01,form_imaging

[logger_root]
level = NOTSET
handlers = hand01

[handler_hand01]
class = handlers.TimedRotatingFileHandler
level = INFO
formatter = form01
args = ("/var/log/mmc/pulse2-package-server.log", 'midnight', 1, 7)

[formatter_form01]
format = %(asctime)s %(levelname)s %(message)s

# Imaging API logger configuration

[logger_imaging]
level = NOTSET
handlers = hand_imaging
propagate = 0
qualname = imaging

[handler_hand_imaging]
class = FileHandler
level = INFO
formatter = form_imaging
args = ("/var/log/mmc/pulse2-package-server.log",)

[formatter_form_imaging]
format = %(asctime)s %(levelname)s Imaging: %(message)s
