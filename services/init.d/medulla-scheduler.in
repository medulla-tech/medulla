#!/bin/bash
#
# (c) 2007-2008 Mandriva, http://www.mandriva.com/
#
# $Id: medulla-launcher 22 2008-01-14 14:52:22Z nrueff $
#
# This file is part of Medulla 2, http://medulla.mandriva.org
#
# Medulla 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Medulla 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Medulla 2; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
### BEGIN INIT INFO
# Provides:          medulla-scheduler
# Required-Start:    $network mysql
# Required-Stop:     $network mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop medulla schedulers
# Description:       Start and stop medulla schedulers
### END INIT INFO

# Redhat based distributions specific
# chkconfig: 345 99 60
# description: Medulla2 Launchers

# Variables
DESC="Medulla2 Scheduler"
DAEMON="@sbindir@/medulla-scheduler-manager"

# Function to start daemon
start () {
    echo -n "Starting ${DESC} : "
    # Start manager
    ${DAEMON} start >/dev/null 2>&1
    RETVAL=$?
    # If return code is 0, everything went fine
    if [ ${RETVAL} -eq 0 ]
      then
        echo "done."
      else
        echo "failed."
    fi
    return ${RETVAL}
}

# Function to stop daemon
stop () {
    echo -n $"Stopping ${DESC} : "
    # Stop manager
    ${DAEMON} stop >/dev/null 2>&1
    # If return code is 0, everything went fine
    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]
      then
        echo "done."
      else
        echo "failed."
    fi
    return ${RETVAL}
}

# Function to restart (run stop, then start)
restart() {
    stop
    sleep 1
    start
}

case $1 in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart | force-reload)
        restart
    ;;
    *)

    echo "Usage: ${0} {start|stop|restart|force-reload}"
    exit 1
esac

exit ${RETVAL}
