#!/bin/sh
#
# Copyright (C) 2012 Mandriva S.A
# http://www.mandriva.com
#
# This file is part of Mandriva Medulla2 project.
#
# This software is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
#
# Build a self-extractible Medulla2 agent pack for win32
#
# Includes:
#  - secure agent
#  - remote desktop agent
#  - inventory agent
#  - rsa key
#
# Author(s):
#   Adam CÃ©cile <acecile@mandriva.com>

# Jump into my own directory
cd "`dirname $0`"

# Latest version of agents
ssh_ver=2.2
vnc_ver=2.7.10
inv_ver=2.3.18

# Compute filenames
ssh_file=medulla-secure-agent-${ssh_ver}.exe
vnc_file=medulla-rda-agent-${vnc_ver}.msi
inv_file=inventory-agent-${inv_ver}.exe
sfx_file=7zsd.sfx

# Main win32 download folder
# https://www.dropbox.com/sh/wu6o0nmcgsq7b6d/AAB6x1z2466gMSHdqdj4aKT_a/win32

# Main mac download folder
# https://www.dropbox.com/sh/qdrpsttj8tqsn2q/AAC4AN0h_TKtfkRocQawQQMHa

# Compute downloads url
ssh_url=https://agents.siveo.net/win/${ssh_file}
vnc_url=https://agents.siveo.net/win/${vnc_file}
inv_url=https://agents.siveo.net/win/${inv_file}
sfx_url=https://agents.siveo.net/win/${sfx_file}


# Unfortunately, MSI agent service is no more alive :-(
# the idea was to provide a service to generate MSI version of Medulla's agents
# Maybe it will rebirth later...
#msi_webservice_url=http://msi-agents.mandriva.com/

# Command line options handling

download_only=0
clean=0
tag=''
my_fqdn=''
fqdn_overrided=0

# Reset in case getopts has been used previously in the shell
OPTIND=1

while getopts "hdct:i:" opt; do
  case "${opt}" in
    h)
      echo
      echo "Usage: ${0} [ -c | -d ] [ -t 'TAG' ] [ -i 'IP Addr' ]"
      echo
      echo "  -h: display this help"
      echo "  -c: clean directory"
      echo "  -d: download only (no generation)"
      echo "  -t 'TAG': Use TAG for inventory client"
      echo "  -i 'IP addr': Use IP addr as inventory server (can be a hostname too)"
      exit 1
      ;;
    d)
      download_only=1
      ;;
    c)
      clean=1
      ;;
    t)
      tag="${OPTARG}"
      ;;
    i)
      my_fqdn="${OPTARG}"
      ;;
    esac
done

shift $((OPTIND-1))
[ "${1}" = "--" ] && shift

# Inventory tag detected
if [ -n "${tag}" ]; then
  echo
  echo "Generating with inventory tag '${tag}'..."
  inv_tag="\/tag=${tag}"
fi

# Inventory server address override
if [ -n "${my_fqdn}" ]; then
  echo
  echo "Generating with inventory server '${my_fqdn}'..."
  fqdn_overrided=1
else
  my_fqdn=`hostname -f`
fi

# Common cleaning
rm -f medulla-win32-agents-installer.exe \
      medulla-win32-agents-installer.nsi \
      sfx.conf.silent \
      sfx.conf \
      base.7z

# Theses old files may exists as well
rm -rf medulla-win32-agents-pack

# Are we cleaning the directory ?
if [ ${clean} -eq 1 ]; then

  # Clean agents and pack
  rm -f medulla-secure-agent-*.exe \
        medulla-rda-agent-*.exe \
        medulla-rda-agent-*.msi \
        inventory-agent-*.exe \
        7zsd.sfx

  echo
  echo "Cleaning done successfully."
  echo

  exit 0
fi

# Sanity checks
# Is dig installed ?
if [ ! ${download_only} -eq 1 ]; then
  if [ ! -x "`which dig`" ]; then
    echo
    echo "dig command cannot be found. Please install dig package and restart this tool."
    echo
    exit 1
  fi
  # Is 7z installed ?
  if [ ! -x "`which 7z`" ]; then
    echo
    echo "7z command cannot be found. Please install p7zip-full package and restart this tool."
    echo
    exit 1
  fi
  # Is makensis installed ?
  if [ ! -x "`which makensis`" ]; then
    echo
    echo "makensis command cannot be found. Please install nsis package and restart this tool."
    echo
    exit 1
  fi
  # Do I have an ssh key ?
  if [ ! -e "/root/.ssh/id_rsa.pub" ]; then
    echo
    echo "No /root/.ssh/id_rsa.pub SSH key found. Please generate one using ssh-keygen and restart this tool."
    echo
    exit
  fi
fi

# Is curl installed ?
if [ ! -x "`which curl`" ]; then
  echo
  echo "curl command cannot be found. Please install curl package and restart this tool."
  echo
  exit 1
fi

if [ ! ${download_only} -eq 1 ]; then
  # Try to figure out if the DNS configuration is fine or not
  if [ ${fqdn_overrided} -eq 1 ]; then
    # Manual override, let's assume it's ok
    is_dns_working=0
  else
    dig ${my_fqdn} +nosearch +short | tail -n1 | grep -q -E '([0-9]{1,3}\.){3}[0-9]{1,3}'
    is_dns_working=${?}
  fi

  # DNS servers haven't replied on i-have-queried-my-own-fqdn, sounds bad.
  if [ ! ${is_dns_working} -eq 0 ]; then
    echo
    echo "#####################"
    echo ' /!\   WARNING   /!\ '
    echo "#####################"
    echo
    echo "I tried to query my own DNS servers for my hostname and haven't got"
    echo "any valid reply. It means the DNS system isn't properly configured,"
    echo "or the hostname I use isn't valid."
    echo
    echo "Despite there's something wrong, it's NOT FATAL."
    echo "I will generate the agents pack with my IP address instead of"
    echo "my FQDN."
    echo
    echo "Restart me later after fixing the DNS issue if you'd rather use an"
    echo "hostname. Verify the DNS entry and DNS configuration by running the"
    echo "following command:"
    echo
    echo "  dig ${my_fqdn}"
    echo
    echo "Once it works, restart me by running:"
    echo
    echo "  ${0}"
    echo
    # I'll try to use an IP address instead
    my_fqdn=""
    echo "Trying to guess an IP address instead..."
    echo
    if [ ! -e "@sysconfdir@/mmc/medulla/package-server/package-server.ini" ]; then
      echo "Cannot find @sysconfdir@/mmc/medulla/package-server/package-server.ini"
      echo "Is Medulla2 really installed ?"
      echo
      exit 1
    else
      # Read public_ip parameters
      test -f /etc/mmc/medulla/package-server/package-server.ini.local && \
        my_fqdn=`grep -E '^public_ip[[:space:]]*=' /etc/mmc/medulla/package-server/package-server.ini.local | cut -d= -f2 | sed 's!\s!!g' | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$'`
      if [ -z ${my_fqdn} ]; then
        test -f /etc/mmc/medulla/package-server/package-server.ini && \
        my_fqdn=`grep -E '^public_ip[[:space:]]*=' /etc/mmc/medulla/package-server/package-server.ini | cut -d= -f2 | sed 's!\s!!g' | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$'`
      fi
      # Still empty ?!?!?
      if [ -z ${my_fqdn} ]; then
        echo "Unable to determinate IP address using public_ip field from"
        echo "package-server.ini. Fix your configuration."
        echo
        exit 1
      else
        echo "For now I will use ${my_fqdn} as hostname."
        echo
      fi
    fi
  fi
fi

# medulla-secure-agent download
if [ -e "${ssh_file}" ]; then
  echo
  echo "${ssh_file} already available. Skipping download."
  echo
else
  echo
  echo "Downloading ${ssh_file}..."
  curl --progress-bar -o ${ssh_file} ${ssh_url}
  echo
  if [ ! -e ${ssh_file} ]; then
    echo
    echo "${ssh_file} download failed. Please restart."
    echo
    exit 1
  fi
fi

# medulla-rda-agent download
if [ -e "${vnc_file}" ]; then
  echo
  echo "${vnc_file} already available. Skipping download."
  echo
else
  echo
  echo "Downloading ${vnc_file}..."
  curl --progress-bar -o ${vnc_file} ${vnc_url}
  echo
  if [ ! -e ${vnc_file} ]; then
    echo
    echo "${vnc_file} download failed. Please restart."
    echo
    exit 1
  fi
fi

# inventory-agent download
if [ -e "${inv_file}" ]; then
  echo
  echo "${inv_file} already available. Skipping download."
  echo
else
  echo
  echo "Downloading ${inv_file}..."
  curl --progress-bar -o ${inv_file} ${inv_url}
  echo
  if [ ! -e ${inv_file} ]; then
    echo
    echo "${inv_file} download failed. Please restart."
    echo
    exit 1
  fi
fi

# 7z SFX download
if [ -e "${sfx_file}" ]; then
  echo
  echo "${sfx_file} already available. Skipping download."
  echo
else
  echo
  echo "Downloading ${sfx_file}..."
  curl --progress-bar -o ${sfx_file} ${sfx_url}
  echo
  if [ ! -e ${sfx_file} ]; then
    echo
    echo "${sfx_file} download failed. Please restart."
    echo
    exit 1
  fi
fi

if [ ! ${download_only} -eq 1 ]; then
  # Generate medulla-win32-agents-installer.exe
  sed -e "s/@@ssh_file@@/${ssh_file}/" \
      -e "s/@@vnc_file@@/${vnc_file}/" \
      -e "s/@@inv_file@@/${inv_file}/" \
      -e "s/@@inv_tag@@/${inv_tag}/" \
      medulla-win32-agents-installer.nsi.in \
      > medulla-win32-agents-installer.nsi

  # Compile NSIS
  echo
  echo "Compiling NSIS installer..."
  echo
  makensis -V1 medulla-win32-agents-installer.nsi

  # Creating base.7z archive
  echo "Creating base 7z archive..."
  7z a base.7z ${ssh_file} ${vnc_file} ${inv_file} medulla-win32-agents-installer.exe /root/.ssh/id_rsa.pub

  # Create agents pack exe
  if [ -n "${tag}" ]; then
    generated_file=medulla-win32-agents-pack-${tag}.exe
  else
    generated_file=medulla-win32-agents-pack.exe
  fi
  sed -e "s/@@inv_server@@/${my_fqdn}/" \
      -e "s/@@inv_server_port@@/9999/" \
       sfx.conf.in > sfx.conf
  cat ${sfx_file} sfx.conf base.7z > ${generated_file}
  echo
  echo "${generated_file} generated successfully!"
  echo

  # Create agents pack exe (silent)
  if [ -n "${tag}" ]; then
    generated_file=medulla-win32-agents-pack-silent-${tag}.exe
  else
    generated_file=medulla-win32-agents-pack-silent.exe
  fi
  sed -e "s/@@inv_server@@/${my_fqdn}/" \
      -e "s/@@inv_server_port@@/9999/" \
       sfx.silent.conf.in > sfx.conf
  cat ${sfx_file} sfx.conf base.7z > ${generated_file}

  echo
  echo "${generated_file} generated successfully!"
  echo

  # Create agents pack exe (no prompt)
  if [ -n "${tag}" ]; then
    generated_file=medulla-win32-agents-pack-noprompt-${tag}.exe
  else
    generated_file=medulla-win32-agents-pack-noprompt.exe
  fi
  sed -e "s/@@inv_server@@/${my_fqdn}/" \
      -e "s/@@inv_server_port@@/9999/" \
       sfx.noprompt.conf.in > sfx.conf
  cat ${sfx_file} sfx.conf base.7z > ${generated_file}

  echo
  echo "${generated_file} generated successfully!"
  echo

  # Let's copy some files for imaging postinstallation
  if [ -z "${tag}" ]; then
    postinstall_dir="../../imaging/postinst"
    if [ -d ${postinstall_dir} ]; then
      cp medulla-win32-agents-pack.exe \
         medulla-win32-agents-pack-silent.exe \
         medulla-win32-agents-pack-noprompt.exe \
         ${postinstall_dir}/winutils/
      cp /root/.ssh/id_rsa.pub ${postinstall_dir}/winutils/
      cp /root/.ssh/id_rsa.pub ${postinstall_dir}/macutils/
      cp /root/.ssh/id_rsa.pub ${postinstall_dir}/linuxutils/
    else
      echo
      echo "No imaging module found. Skipping files copy for postinstall."
      echo
    fi
  fi

  # Generating msi agents
  # echo " Generating MSI silent agents ..."
  # curl --progress-bar -o medulla_agents_silent.msi --data-urlencode "ip=$my_fqdn" --data-urlencode "tag=$tag" --data-urlencode "key@/root/.ssh/id_rsa.pub" $msi_webservice_url

fi
