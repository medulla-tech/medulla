Installation Instructions
*************************

Copyright (C) 2011 Siveo, http://www.siveo.net

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Pre-requisites
============

The following tools are needed in order for Medulla2 to install and run
properly:
- mmc-core framework
- python >= 2.5, with the following modules:
  - sqlalchemy
  - mysqldb
- OpenSSH client
- iputils (ping)
- perl, with the following modules:
  - syslog
- gettext
- NFS server (for imaging)
- 7z (for win32 client generation)
- NSIS (for building win32 agent pack, can be disabled)

Furthermore, the following services must be accessible, either on the local
machine or through the network:
- MySQL
- DHCP server (for imaging purpose)

If you build Medulla2 from scm repository, you will also need the following tools
(not needed if you use the .tar.gz archive):
- autoconf
- automake
- xsltproc
- docbook xsl

Quick installation
==================

If you get the code from scm:
$ ./autogen.sh

Then
$ ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var
$ make
$ sudo make install

The `medulla-setup' tool can then be used to provision databases,
setup and check configuration files, etc. If you plan to use imaging
service, please read the following section, as medulla-setup does not
handle with its configuration.

Quick imaging client installation
============================

Imaging client can run only on i386 compliant machines. It is not run
directly on the server, but served through the network to i386 machines.
For your convenience, prebuilt binaries are available, so that you can
install it on a server which is not i386.

Once you have downloaded prebuilt binaries as
medulla-imaging-client-<version>_i386.tar.gz, simply run the following, as root:
$ tar xfC medulla-imaging-client-<version>_i386.tar.gz /

All files are extracted in /var/lib/medulla/imaging/ dir.

As to serve the imaging client to the machines, you must then configure the
following network services.

NFS
---

In `/etc/exports' file, add the following lines:
/var/lib/medulla/imaging/computers *(async,rw,no_root_squash,subtree_check)
/var/lib/medulla/imaging/masters *(async,rw,no_root_squash,subtree_check)
/var/lib/medulla/imaging/postinst *(async,ro,no_root_squash,subtree_check)

Then reload the new NFS configuration, as root:
$ exportfs -r -a

DHCP
----

The DHCP server on your network must be configured to serve bootload through
PXE protocol. You can find an example file for dhcp3 server in
`/usr/share/doc/medulla/contrib/dhcp/dhcpd.conf'.

TFTP
----

Bootloader and kernel are served to the client with TFTP protocol.
We recommend using the atftpd server.

You must configure the TFTP server to use as base directory:
`/var/lib/medulla/imaging'.

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of all of the options to `configure', and exit.

`--help=short'
`--help=recursive'
     Print a summary of the options unique to this package's
     `configure', and exit.  The `short' variant lists options used
     only in the top level, while the `recursive' variant lists options
     also present in any nested packages.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--prefix=DIR'
     Use DIR as the installation prefix.  *note Installation Names::
     for more details, including other options available for fine-tuning
     the installation locations.

`--no-create'
`-n'
     Run the configure checks, but stop before creating any output
     files.

`--disable-conf'
     Do not install conf files. On a first install, you may not use this
     option as configuration files are required.

`--disable-conf-backup'
     Do not backup configuration files if they are already installed.
     Default is to create backup files like *.~N~

`--disable-wol'
    Do not build and install wake-on-lan tool.

Quick installation : devel branch
============================
In tools repository, 'install-medulla-git' allow a quick setup.
./install-medulla-git \
	--medulla-repo-url=<medulla repo url> \
	--root-password=<root password> \
	--org-name=<organization name> \
	--interface-to-clients=<interface> \
	--enable-medulla-main=[g]lpi[d]hcp|[p]xe | --enable-multisite=[d]hcp|[p]xe|[b]ackuppc \
	--create-entity \
	--entity=<entity name> \
	--dhcp-dns-server=<dns server for DHCP clients> \
	--dhcp-gateway-address=<gateway address for DHCP clients> \
	--interface-to-main-medulla=<interface> \
	--main-medulla-ip=<IP address> \
	--glpi-url=<GLPI URL> \
	--glpi-dbhost=<IP address> \
	--glpi-dbname=<database name> \
	--glpi-dbuser=<database username> \
	--glpi-dbpasswd=<database user password> \
	--glpi-dbrootpasswd=<mysql root password> 
  	--branch=<devel branche to use>

Repository for devel branch http://git.siveo.net/
